name: push

on:
  push:
  schedule:
    - cron: "0 8 * * 1" # Mondays at 8am

jobs:
  build: # -----------------------------------------------------------------------------
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.7", "3.x"]
    name: build-v${{matrix.python-version}}

    steps:
      - name: Checking out Git Commit
        uses: actions/checkout@v2

      - name: Installing Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
          cache: pip
          cache-dependency-path: setup.cfg

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('MANIFEST.in') }}-${{ hashFiles('pyproject.toml') }}

      - name: Installing dependencies
        run: pip install -U -e .[test,dev]

      - name: Attempting build
        run: python -m build --no-isolation

  lint: # ------------------------------------------------------------------------------
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checking out Git Commit
        uses: actions/checkout@v2

      - name: Installing Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          cache: pip
          cache-dependency-path: setup.cfg

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('MANIFEST.in') }}-${{ hashFiles('pyproject.toml') }}

      - name: Linting with black
        run: black --check mnamer tests

      - name: Linting isort
        run: isort --check-only mnamer tests

      - name: Linting mypy
        run: mypy mnamer

  test: # ------------------------------------------------------------------------------
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        python-version: ["3.7", "3.x"]
    name: test-v${{matrix.python-version}}

    steps:
      - name: Checking out Git Commit
        uses: actions/checkout@v2

      - name: Installing Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
          cache: pip
          cache-dependency-path: setup.cfg

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('MANIFEST.in') }}-${{ hashFiles('pyproject.toml') }}

      - name: Running Local Unit Tests
        run: >-
          python -m pytest
          -m local
          --durations=10
          --cov=./
          --cov-append
          --cov-report=term-missing
          --cov-report=xml

      - name: Running Network Unit Tests
        run: >-
          python -m pytest
          -m network
          --reruns 3
          --durations=10
          --cov=./
          --cov-append
          --cov-report=term-missing
          --cov-report=xml

      - name: Running End to End Tests
        run: >-
          python -m pytest
          -m e2e
          --reruns 3
          --durations=10
          --cov=./
          --cov-append
          --cov-report=term-missing
          --cov-report=xml

      - name: Reporting Coverage Statistics
        if: >
          success()
          && github.event_name == 'push'
          && github.ref == 'refs/heads/master'
          && matrix['python-version'] == '3.x'
        uses: codecov/codecov-action@v1

  publish: # ---------------------------------------------------------------------------
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - build
      - lint
      - test

    steps:
      - name: Checking out Git Commit
        uses: actions/checkout@v2

      - name: Installing Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Installing Requirements
        run: pip install -U pip -e .[dev]

      - name: Building universal wheel
        run: python -m build

      - name: Uploading to PyPI
        run: >-
          twine upload
          --username __token__
          --password ${{secrets.pypi_password}}
          dist/*
